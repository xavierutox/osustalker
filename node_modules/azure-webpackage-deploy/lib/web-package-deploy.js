/*
* External dependencies
*/
const jsonfile = require('jsonfile')
const fs = require('fs')
const chalk = require('chalk')
const cheerio = require('cheerio')
const path = require('path')
const md5File = require('md5-file')

/*
* Local dependencies
*/
const { AzureBlobStorageClient, AzureSitesClient } =  require('./clients')

module.exports = class WebPackageDeploy {
    constructor(storageAccountName, storageAccountKey) {
        this.blobStorageClient = new AzureBlobStorageClient(storageAccountName, storageAccountKey)
        this.azureSitesClient = new AzureSitesClient()
    }
       
    /**
     * Methods
     */
    deploy(entryFilePath, blobContainerName, webPackageName){
        return this.blobStorageClient.createContainerIfNotExists(blobContainerName)
        .then(this.logGetBlobContainer)
        .then(() => this.getEntryFileScriptDefinitions(entryFilePath))
        .then((fileDefinitions) => this.deployFiles(fileDefinitions, blobContainerName))
        .then((fileDefinitions) => this.uploadPackageDefinition(fileDefinitions, path.dirname(entryFilePath), webPackageName, blobContainerName))
        .catch(function(error){
            console.log(error)
            process.exit
        })
    }
    logGetBlobContainer(result){
        if(result.created){
            console.log(chalk.bold.green('Created new storage container'))
        }
        else {
            console.log(chalk.bold.green('Storage container already exists'))
        }
        console.log(chalk.bold.green('Begin uploading package...'))
    }
    uploadPackageDefinition(fileDefinitions, sourceDirectory, packageName, blobContainerName){
        const bundleDefinition = {
            name: packageName,
            scripts: fileDefinitions.map((definition) => {
                delete definition.path
                return definition
            })
        }
        const definitionFilePath = `${sourceDirectory}/${packageName}.json`      
        jsonfile.writeFileSync(definitionFilePath, bundleDefinition)
        const blobName = `${packageName}-${md5File.sync(definitionFilePath)}.json`
        return this.blobStorageClient.createBlockBlobFromFile(definitionFilePath, blobContainerName, blobName).then((definitionFileUrl) =>{
            bundleDefinition.definitionFileUrl = definitionFileUrl
            return bundleDefinition
        })
    }
    getEntryFileScriptDefinitions(indexPath){
        let $ = cheerio.load(fs.readFileSync(indexPath).toString())
        let scriptFileNames = new  Array()
        let indexDirectory = path.dirname(indexPath)
        $('script[type="text/javascript"]').each(function(index) {
            let filename = $(this).attr('src')
            if(filename){
                scriptFileNames.push({
                    fileName: filename.replace(/^\/|\/$/g, ''),
                    path: `${indexDirectory}/${filename}`,
                    priority: index,
                    url: ''
                })
            }
        })
        return scriptFileNames
    }
    deployFiles(fileDefinitions, containerName){
        return this.blobStorageClient.createBlockBlobsFromLocalFiles(
            fileDefinitions,
            containerName,
            { cacheControl: 'public, max-age=31536000, must-revalidate' })
    }
    updateSiteAppSetting(settingString, site, slot, settingKey){
        return this.azureSitesClient.updateAppSettings(settingKey, settingString, site, slot)
    }
}