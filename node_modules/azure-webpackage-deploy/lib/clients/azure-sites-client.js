const azureScripty = require('azure-scripty')
const Promise = require('bluebird')

module.exports = class AzureSitesClient {
    constructor(){
        
    }
    addAppSetting(name, value, site, slot){
        const command = `appsetting add --slot ${slot} ${name}=${value} ${site}`
        return this.executeCommand(command)
        .then(() => {
            return {key:name,value:value}
        })
    }
    updateAppSettings(name, value, site, slot){
        return this.deleteAppSetting(name, site, slot)
        .catch(() => {
            return Promise.resolve()
        })// squash catch in case it didn't exist to start with
        .then(() => this.addAppSetting(name, value, site, slot))
        .then(() => {
            return {key:name,value:value}
        })
    }
    deleteAppSetting(name, site, slot){
        const command = `appsetting delete -q --slot ${slot} ${name} ${site}`
        return this.executeCommand(command)
    }
    
    getAllSites(){
        return this.executeCommand('list')
    }
    executeCommand(command){
        return new Promise(function (resolve, reject) {
            let siteCommand = 'site ' + command
            console.log(`Executing azure cli command: ${siteCommand}`)
            azureScripty.invoke(siteCommand, function(error, result) {
                if (error) {
                    reject(error)
                }
                resolve(result)
            })
        })
    }
}