const Promise = require('bluebird')
const azureStorage = require('azure-storage')
const _ = require('lodash')

module.exports = class AzureBlobStorageClient {
    constructor(storageAccountName, storageAccountKey) {
        if(storageAccountName ==  null) throw 'You must supply a "storageAccountName"'
        if(storageAccountKey ==  null) throw 'You must supply a "storageAccountKey"'
        process.env['AZURE_STORAGE_ACCOUNT'] = storageAccountName
        process.env['AZURE_STORAGE_ACCESS_KEY'] = storageAccountKey
        let azureBlobService = this.getBlobService(storageAccountName, storageAccountKey)
        this.azureBlobService = azureBlobService
    }
    
    /**
     * Methods
     */
    
    createContainerIfNotExists(containerName){
        var self = this
        return new Promise(function (resolve, reject) {
            self.azureBlobService.createContainerIfNotExists(containerName, function (error, result, response) {
                if (error) {
                    reject(error)
                }
                if(!response.isSuccessful){
                    reject(response)
                }
                resolve({created: result.created, result: result, response: response})
            })
        })
    }
    createBlockBlobFromFile(filePath, containerName, blobName, options = {}){
        var self = this
        return new Promise(function (resolve, reject) {
            self.azureBlobService.createBlockBlobFromLocalFile(containerName, blobName, filePath, options, function(error, result, response) {
                if (error) {
                    reject(error)
                }
                else if(!response.isSuccessful){
                    reject(response)
                }
                else{
                    resolve(`${self.azureBlobService.host.primaryHost}${containerName}/${blobName}`)
                }
                
            })
        })
    }  
    createBlockBlobFromFileDefinition(fileDefinition, containerName, blobName, options = {}){
        let self = this
        return this.createBlockBlobFromFile(fileDefinition.path, containerName, blobName, options).then(function(){
            fileDefinition.url = `${self.azureBlobService.host.primaryHost}${containerName}/${blobName}`
            return Promise.resolve(fileDefinition)
        })
    }  
    createBlockBlobsFromLocalFiles(fileDefinitions, containerName, subfolderName, options = {}){
        var self = this
        return new Promise(function (resolve, reject) {
            let fileUploads = []
            _.each(fileDefinitions, (fileDefinition) => {
                let upload = self.createBlockBlobFromFileDefinition(
                    fileDefinition, 
                    containerName, 
                    fileDefinition.fileName, 
                    options)
                fileUploads.push(upload)
            })
            Promise.all(fileUploads).then(function(result) {
                resolve(result)
            }).catch(function(error){
                reject(error)
            })
        })
    }
    getBlobService(storageAccountName, storageAccountKey){
        process.env['AZURE_STORAGE_ACCOUNT'] = storageAccountName
        process.env['AZURE_STORAGE_ACCESS_KEY'] = storageAccountKey
        return azureStorage.createBlobService()
    }
}


