#!/usr/bin/env node
const program = require('commander')
const chalk = require('chalk')
const azureScripty = require('azure-scripty')
const { WebPackageDeploy } = require('./lib')

program
    .option('-i, --indexDocumentPath <indexDocumentPath>', 'Relative path to the index file that references the scripts to be deployed')
    .option('-a, --storageAccountName <storageAccountName>', 'The storage account to use')
    .option('-k, --storageAccountKey <storageAccountKey>', 'The storage account access key to use')
    .option('-c, --storageContainerName <storageContainerName>', 'The storage container name. This is where files will be published')
    .option('--site <site>', 'Azure website add package definition url appsetting to')
    .option('--slot <slot>', 'Azure website slot to add package definition url appsetting to')
    .option('--definitionAppSettingKey <definitionAppSettingKey>', 'Optional: Azure appsetting key string to use. Defaults to \"AzureWebPackageDeploy:Definition:Main\"')
    .option('--bundleDefinitionName <bundleDefinitionName>', 'Optional name that will be the json file uploaded with the scripts')
    .parse(process.argv)

// required params
let missingParameters = new Array()
if (!program.indexDocumentPath) { missingParameters.push('--indexDocumentPath') }
if (!program.storageAccountName) { missingParameters.push('--storageAccountName') }
if (!program.storageAccountKey) { missingParameters.push('--storageAccountKey') }
if (!program.storageContainerName) { missingParameters.push('--storageContainerName') }
if (!program.site) { missingParameters.push('--site') }
if (!program.slot) { missingParameters.push('--slot') }
if (missingParameters.length > 0) {
    console.error(chalk.bold.red('You are missing the following required parameters:'))
    console.error(chalk.bold.red(missingParameters.toString()))
    process.exit()
}

if (!program.bundleDefinitionName) {
    program.bundleDefinitionName = 'main'
}
if (!program.definitionAppSettingKey) {
    program.definitionAppSettingKey = 'AzureWebPackageDeploy:Definition:Main'
}

console.time('azure-webpackage-deploy')

console.log(chalk.bold.green('Deploying front end files with the following credentials: '))
console.log('indexDocumentPath: %s', program.indexDocumentPath)
console.log('storageAccountName: %s', program.storageAccountName)
console.log('storageAccountKey: %s', program.storageAccountKey.replace(/./g, '*'))
console.log('storageContainerName: %s', program.storageContainerName)
console.log('site: %s', program.site)

const uploadAssets = (indexDocumentPath, storageAccountName, storageAccountKey, storageContainerName, bundleDefinitionName) => {
    var azureAssetUploader = new WebPackageDeploy(storageAccountName, storageAccountKey)
    azureAssetUploader.deploy(
        indexDocumentPath,
        storageContainerName,
        bundleDefinitionName)
    .then((packageDefinitionJson) => {
        console.log(chalk.bold.green(`Deployed packed definition file at the follow url: ${packageDefinitionJson}`))
        let escapedJson = JSON.stringify(JSON.stringify(packageDefinitionJson))
        return azureAssetUploader.updateSiteAppSetting(escapedJson, program.site, program.slot, program.definitionAppSettingKey)
    })
    .then(function (result) {
        console.log(chalk.bold.green(`Updated appsetting key '${result.key}'='${result.value}'`))
        console.log(chalk.bold.green('Deployment complete'))
        console.timeEnd('azure-webpackage-deploy')
        process.exit()
    })
    .catch((error) => {
        console.log(error)
        process.exit()
    })
}

azureScripty.invoke('config mode asm', function (error, result) {
    if (error) {
    }
    uploadAssets(program.indexDocumentPath, program.storageAccountName, program.storageAccountKey, program.storageContainerName, program.bundleDefinitionName)
})
